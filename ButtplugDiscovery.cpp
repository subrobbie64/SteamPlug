#include "ButtplugDiscovery.h"
#include "ButtplugConfig.h"

std::string Mac2String(BtAddress Address) {
	char macAddress[32];
	sprintf(macAddress, "%02X:%02X:%02X:%02X:%02X:%02X", ((unsigned char*)&Address)[5], ((unsigned char*)&Address)[4], ((unsigned char*)&Address)[3], ((unsigned char*)&Address)[2], ((unsigned char*)&Address)[1], ((unsigned char*)&Address)[0]);
	return std::string(macAddress);
}

ButtplugDiscovery::ButtplugDiscovery() : _discoveredHushDevice(0), _discoveredHushDeviceType(0), _inspectedDeviceNumber(-1) {
	__hook(&CwclBluetoothManager::OnDeviceFound, &_wclBluetoothManager,
		&ButtplugDiscovery::wclBluetoothManagerDeviceFound);
	__hook(&CwclBluetoothManager::OnDiscoveringCompleted, &_wclBluetoothManager,
		&ButtplugDiscovery::wclBluetoothManagerDiscoveringCompleted);
	__hook(&CwclBluetoothManager::OnDiscoveringStarted, &_wclBluetoothManager,
		&ButtplugDiscovery::wclBluetoothManagerDiscoveringStarted);

	__hook(&CwclGattClient::OnConnect, &_wclGattClient, &ButtplugDiscovery::wclGattClientConnect);
	__hook(&CwclGattClient::OnDisconnect, &_wclGattClient, &ButtplugDiscovery::wclGattClientDisconnect);

	_wclBluetoothManager.SetMessageProcessing(mpAsync);

	_discoveryCompletedEvent = System::CreateEventFlag();

	int res = _wclBluetoothManager.Open();
	if (res != WCL_E_SUCCESS)
		error("Error opening Bluetooth manager: 0x%X", res);

}

void ButtplugDiscovery::wclBluetoothManagerDiscoveringStarted(void* Sender, CwclBluetoothRadio* const Radio)
{
	UNREFERENCED_PARAMETER(Sender);
	UNREFERENCED_PARAMETER(Radio);

	_discoveredHushDevice = 0;
	_discoveredHushDeviceType = -1;

	_discoveredDevices.clear();
	log("Starting Bluetooth Discovery...\n");
}

void ButtplugDiscovery::wclBluetoothManagerDeviceFound(void* Sender, CwclBluetoothRadio* const Radio,
	const __int64 Address)
{
	UNREFERENCED_PARAMETER(Sender);

	std::string macAddressStr = Mac2String(Address);
	wclBluetoothDeviceType DevType = dtMixed;
	int Res = Radio->GetRemoteDeviceType(Address, DevType);
	if (Res != WCL_E_SUCCESS)
		log("Found device %s but cannot determine type.\n", macAddressStr.c_str());
	else if (DevType != dtBle)
		log("Found device %s but it's no BLE device, skipping.\n", macAddressStr.c_str());
	else {
		log("Found device %s\n", macAddressStr.c_str());
		_discoveredDevices.push_back(Address);
	}
}

int ButtplugDiscovery::getHushDeviceType(BtAddress address, wclGattServices &services) {
	for (wclGattServices::iterator i = services.begin(); i != services.end(); i++) {
		wclGattService Service = (*i);
		if (Service.Uuid.IsShortUuid)
			continue;

		for (int j = 0; j < NUM_HUSH_DEVICES; j++) {
			if (!memcmp(&Service.Uuid.LongUuid, &HUSH_DEVICE[j].serviceId.LongUuid, sizeof(GUID)))
				return j;
		}
	}
	return -1;
}

void ButtplugDiscovery::wclBluetoothManagerDiscoveringCompleted(void* Sender, CwclBluetoothRadio* const Radio,
	const int Error)
{
	UNREFERENCED_PARAMETER(Sender);
	UNREFERENCED_PARAMETER(Error);

	if (Error != WCL_E_SUCCESS)
		error("\nDiscovery completed with error 0x%X!\n", Error);
	else
		log("\nDiscovery completed.\n\n\n", Error);

	if (_discoveredDevices.empty())
		error("No BLE devices found!\n");

	_inspectedDeviceNumber = -1;
	inspectNextDevice();
}

void ButtplugDiscovery::inspectNextDevice() {
	_inspectedDeviceNumber++;
	if (_inspectedDeviceNumber >= (int)_discoveredDevices.size()) {
		log("\nInspecting devices complete\n");
		System::SetEvent(_discoveryCompletedEvent);
		return;
	}

	CwclBluetoothRadio* Radio;
	int Res = _wclBluetoothManager.GetLeRadio(Radio);
	if (Res != WCL_E_SUCCESS)
		error("Unable to get BT radio instance, error 0x%X!\n", Res);

	_wclGattClient.Address = _discoveredDevices.at(_inspectedDeviceNumber);
	_wclGattClient.ConnectOnRead = true;
	_wclGattClient.ForceNotifications = false;
	Res =_wclGattClient.Connect(Radio);
	if (Res != WCL_E_SUCCESS)
		log("Connect error 0x%X\n", Res);
}

bool ButtplugDiscovery::runDiscovery() {
	System::ResetEvent(_discoveryCompletedEvent);

	CwclBluetoothRadio* Radio;
	int Res = _wclBluetoothManager.GetLeRadio(Radio);
	if (Res != WCL_E_SUCCESS)
		error("Unable to get BT radio instance, error 0x%X!\n", Res);

	Res = Radio->Discover(10, dkBle);
	if (Res != WCL_E_SUCCESS)
		error("Error starting BT discovering: 0x%X!", Res);

	System::WaitEvent(_discoveryCompletedEvent);
	return _discoveredHushDevice != 0;
}

void ButtplugDiscovery::wclGattClientConnect(void* Sender, const int Error) {
	BtAddress Address = ((CwclGattClient*)Sender)->Address;
	log("Examining device %s", Mac2String(Address).c_str());

	CwclBluetoothRadio* Radio;
	int Res = _wclBluetoothManager.GetLeRadio(Radio);
	if (Res != WCL_E_SUCCESS)
		error("Unable to get BT radio instance, error 0x%X!\n", Res);

	tstring DevName;
	Res = Radio->GetRemoteName(Address, DevName);
	if (Res == WCL_E_SUCCESS) {
		wprintf(L" - %s", DevName.c_str());
		wclGattServices FServices;
		Res = _wclGattClient.ReadServices(goNone, FServices);
		if (Res == WCL_E_SUCCESS) {
			int detectionResult = getHushDeviceType(Address, FServices);
			if (detectionResult >= 0) {
				log(" - this \x1B[%02Xmlooks like a Hush 2\x1B[%02Xm (Type %d)!\n", GREEN, WHITE, detectionResult);
				_discoveredHushDeviceType = detectionResult;
				_discoveredHushDevice = Address;
			}
		} else
			log(" - error 0x%X reading services.", Res);
	} else
		log(" - error 0x%X, device ignored.", Res);

	Res = _wclGattClient.Disconnect();
	if (Res != WCL_E_SUCCESS)
		log(" - error 0x%X disconnecting.", Res);
	log("\n");
}

void ButtplugDiscovery::wclGattClientDisconnect(void* Sender, const int Reason) {
	UNREFERENCED_PARAMETER(Sender);
	UNREFERENCED_PARAMETER(Reason);
	
	if (_discoveredHushDevice)
		System::SetEvent(_discoveryCompletedEvent);
	else
		inspectNextDevice();
}

ButtplugConfig* ButtplugDiscovery::getAsConfiguration() {
	return new ButtplugConfig(_discoveredHushDevice, _discoveredHushDeviceType);
}

const ButtplugDeviceDefinition ButtplugDiscovery::HUSH_DEVICE[] = {
	{{ false, 0, { 0x0000fff0, 0x0000, 0x1000, { 0x80, 0x00, 0x00, 0x80, 0x5f, 0x9b, 0x34, 0xfb }}},
	  { false, 0, { 0x0000fff2, 0x0000, 0x1000, { 0x80, 0x00, 0x00, 0x80, 0x5f, 0x9b, 0x34, 0xfb }}},
	  { false, 0, { 0x0000fff1, 0x0000, 0x1000, { 0x80, 0x00, 0x00, 0x80, 0x5f, 0x9b, 0x34, 0xfb }}}},
	{{ false, 0, { 0x6e400001, 0xb5a3, 0xf393, { 0xe0, 0xa9, 0xe5, 0x0e, 0x24, 0xdc, 0xca, 0x9e }}},
	  { false, 0, { 0x6e400002, 0xb5a3, 0xf393, { 0xe0, 0xa9, 0xe5, 0x0e, 0x24, 0xdc, 0xca, 0x9e }}},
	  { false, 0, { 0x6e400003, 0xb5a3, 0xf393, { 0xe0, 0xa9, 0xe5, 0x0e, 0x24, 0xdc, 0xca, 0x9e }}}},
	{{ false, 0, { 0x50300001, 0x0024, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x50300002, 0x0024, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x50300003, 0x0024, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x57300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x57300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x57300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x5a300001, 0x0024, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x5a300002, 0x0024, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x5a300003, 0x0024, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x50300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x50300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x50300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x53300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x53300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x53300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x5a300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x5a300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x5a300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x4f300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4f300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4f300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x42300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x42300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x42300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x43300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x43300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x43300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x4c300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4c300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4c300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x4c410001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4c410002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4c410003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x56300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x56300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x56300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x58300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x58300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x58300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x52300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x52300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x52300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x46300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x46300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x46300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x50300011, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x50300012, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x50300013, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x4a300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4a300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4a300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x45440001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45440002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45440003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x45420001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45420002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45420003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x54300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x54300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x54300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x45490001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45490002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45490003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x4e300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4e300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4e300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x45410001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45410002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45410003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x51300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x51300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x51300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x45460001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45460002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x45460003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x454c0001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x454c0002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x454c0003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x55300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x55300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x55300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x53440001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x53440002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x53440003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x48300001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x48300002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x48300003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x46530001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x46530002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x46530003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x42410001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x42410002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x42410003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x43410001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x43410002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x43410003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x4f430001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4f430002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x4f430003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
	{{ false, 0, { 0x455a0001, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x455a0002, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}},
	  { false, 0, { 0x455a0003, 0x0023, 0x4bd4, { 0xbb, 0xd5, 0xa6, 0x92, 0x0e, 0x4c, 0x56, 0x53 }}}},
};

const int ButtplugDiscovery::NUM_HUSH_DEVICES = sizeof(HUSH_DEVICE) / sizeof(HUSH_DEVICE[0]);

